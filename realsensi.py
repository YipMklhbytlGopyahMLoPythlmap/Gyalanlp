import base64;exec(base64.b64decode('aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IGltcG9ydGxpYi51dGlsCmltcG9ydCBzaHV0aWwKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCB0aW1lCmltcG9ydCB6aXBmaWxlCmZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlCmltcG9ydCBweWZpZ2xldApmcm9tIHRxZG0gaW1wb3J0IHRxZG0KCgpkZWYgaW5zdGFsbF9hbmRfaW1wb3J0KG1vZHVsZV9uYW1lKToKICAgIHNwZWMgPSBpbXBvcnRsaWIudXRpbC5maW5kX3NwZWMobW9kdWxlX25hbWUpCiAgICBpZiBzcGVjIGlzIE5vbmU6CiAgICAgICAgcHJpbnQoZiJNb2R1bGUgJ3ttb2R1bGVfbmFtZX0nIG5vdCBmb3VuZC4gSW5zdGFsbGluZy4uLiIpCiAgICAgICAgc3VicHJvY2Vzcy5jaGVja19jYWxsKFtzeXMuZXhlY3V0YWJsZSwgIi1tIiwgInBpcCIsICJpbnN0YWxsIiwgbW9kdWxlX25hbWVdKQogICAgZWxzZToKICAgICAgICBwcmludChmIk1vZHVsZSAne21vZHVsZV9uYW1lfScgaXMgYWxyZWFkeSBpbnN0YWxsZWQuIikKCgptb2R1bGVzID0gWyJyZXF1ZXN0cyIsICJjb2xvcmFtYSIsICJweWZpZ2xldCIsICJ0cWRtIl0KZm9yIG1vZHVsZSBpbiBtb2R1bGVzOgogICAgaW5zdGFsbF9hbmRfaW1wb3J0KG1vZHVsZSkKCmRlZiBoYXB1c19maWxlKG5hbWFfZmlsZXMpOgogICAgZm9yIG5hbWFfZmlsZSBpbiBuYW1hX2ZpbGVzOgogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKG5hbWFfZmlsZSk6ICAjIENlayBhcGFrYWggZmlsZSBhZGEKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MucmVtb3ZlKG5hbWFfZmlsZSkKICAgICAgICAgICAgICAgIHN1YnByb2Nlc3MucnVuKFsicm0iLCAiLWYiLCBuYW1hX2ZpbGVdKQogICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMzJt4pyTIEZpbGUgQ2FjaGUgYmVyaGFzaWwgZGloYXB1cyBbIOKckyBdIikKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQogICAgICAgICAgICBleGNlcHQgUGVybWlzc2lvbkVycm9yOgogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oWyJybSIsICItZiIsIG5hbWFfZmlsZV0pCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oInJtIC1mIC9zdG9yYWdlL2VtdWxhdGVkLzAvQW5kcm9pZC9kYXRhL2NvbS5kdHMuZnJlZWZpcmV0aC9maWxlcy9mZnJ0Y19sb2cudHh0IikKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJcMDMzWzMxbVggVGVyamFkaSBrZXNhbGFoYW4gc2FhdCBtZW5naGFwdXMge25hbWFfZmlsZX06IHtlfSIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgcGFzcwoKZGVmIGhhcHVzX2ZvbGRlcihuYW1hX2ZvbGRlcnMpOgogICAgZm9yIG5hbWFfZm9sZGVyIGluIG5hbWFfZm9sZGVyczoKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhuYW1hX2ZvbGRlcik6ICAjIENlayBhcGFrYWggZm9sZGVyIGFkYQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzaHV0aWwucm10cmVlKG5hbWFfZm9sZGVyKQogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oWyJybSIsICItcmYiLCBuYW1hX2ZvbGRlcl0pCiAgICAgICAgICAgICAgICBwcmludCgiXDAzM1szMm3inJMgRm9sZGVyIENhY2hlIGJlcmhhc2lsIGRpaGFwdXMgWyDinJMgXSIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDAuNSkKICAgICAgICAgICAgZXhjZXB0IFBlcm1pc3Npb25FcnJvcjoKICAgICAgICAgICAgICAgIHN1YnByb2Nlc3MucnVuKFsicm0iLCAiLXJmIiwgbmFtYV9mb2xkZXJdKQogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludChmIlwwMzNbMzFtWCBUZXJqYWRpIGtlc2FsYWhhbiBzYWF0IG1lbmdoYXB1cyB7bmFtYV9mb2xkZXJ9OiB7ZX0iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHBhc3MKCmRlZiBjbGVhcigpOgogICAgICAgIGlmIHBsYXRmb3JtLnN5c3RlbSgpID09ICJXaW5kb3dzIjoKICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiY2xzIikKICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJjbGVhciIpCgpkZWYgYnV5X2lkKCk6CiAgICB0cnk6CiAgICAgICAgdXJsX2FwaWtleSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L1UxdGdCcU1TIikuanNvbigpCiAgICAgICAgY2hlY2tfYXBpa2V5ID0gcmVxdWVzdHMuZ2V0KHVybF9hcGlrZXlbIktleSJdKS5qc29uKCkKICAgICAgICBnZXRfaWQgPSBvcy5nZXRsb2dpbigpCgogICAgICAgIHJhem9yX2xvZ28gPSBweWZpZ2xldC5maWdsZXRfZm9ybWF0KCJSRUFMU0VOU0kgT0ZDIiwgZm9udD0ic2xhbnQiKQogICAgICAgIHByaW50KGYie0ZvcmUuV0hJVEV9e3Jhem9yX2xvZ299e1N0eWxlLlJFU0VUX0FMTH0iKQogICAgICAgIHByaW50KAogICAgICAgICAgICAiU2lsYWthbiBtZW1iZWxpIElEIHRlcmxlYmloIGRhaHVsdS4uLlxuIgogICAgICAgICAgICAiSmlrYSBBbmRhIHRpZGFrIG1lbWlsaWtpIElELCBzaWxha2FuIGJlbGkgVGVybGViaWggRGFodWx1IERpIEFkbWluIFJlc21pIEBSZWFsU2Vuc2kgT2ZmaWNpYWwiCiAgICAgICAgKQogICAgICAgIHByaW50KGYiXG5Zb3VyIElEOiB7Z2V0X2lkfSIpCgogICAgICAgIGlucHV0KCIgU2lsYWhrYW4gTWFzdWtrYW4gSUQgdW50dWsgTWVtYmVsaSAoWW91ciBJRCk6ICIpCgogICAgICAgIGZvciBwZW5nZ3VuYSBpbiBjaGVja19hcGlrZXlbInBlbmdndW5hIl06CiAgICAgICAgICAgIGlmIGdldF9pZCA9PSBwZW5nZ3VuYVsiaWQiXToKICAgICAgICAgICAgICAgIGNsZWFyX3Rlcm1pbmFsKCkKICAgICAgICAgICAgICAgIHN0YXJ0KCkKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICBjbGVhcl90ZXJtaW5hbCgpCiAgICAgICAgcHJpbnQoIklkIEFuZGEgdGlkYWsgdGVyZGFmdGFyLCBTaWxha2FuIEJlbGkgSWQgVGVybGViaWggRGFodWx1IFdhaXQuLiIpCiAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgIG9zLnN5c3RlbSgKICAgICAgICAgICAgZiJ4ZGctb3BlbiBodHRwczovL3dhLm1lLzYyODgyMTU1OTI4NzE/dGV4dD1oZWxsbythZG1pbitpK3dhbnQrdG8rcHVyY2hhc2UrdGhlK3NlbnNpK3NjcmlwdCt0aGlzK2lzK215K2lkOntnZXRfaWR9IgogICAgICAgICkKICAgICAgICBidXlfaWQoKQogICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgIHByaW50KCJLb25la3NpIGludGVybmV0IGJ1cnVrLi4uIikKCgpkZWYgc3RhcnQoKToKICAgIHRyeToKICAgICAgICBjbGVhcigpCiAgICAgICAgcHJpbnQoZiJ7Rm9yZS5XSElURX17cHlmaWdsZXQuZmlnbGV0X2Zvcm1hdCgnUkVBTFNFTlNJIE9GQycsIGZvbnQ9J3NsYW50Jyl9e1N0eWxlLlJFU0VUX0FMTH1cbiIpCiAgICAgICAgcHJpbnQoIjEuIElOU1RBTEwgQ09ORklHICsgT1BUSU1JWkVSIikKICAgICAgICBwcmludCgiMi4gRXhpdCIpCiAgICAgICAgY2hvaWNlID0gaW5wdXQoIlBpbGloIG9wc2k6ICIpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIG11bGFpX2luc3RhbGwoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHN5cy5leGl0KDApCiAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6CiAgICAgICAgcHJpbnQoIktvbmVrc2kgaW50ZXJuZXQgYnVydWsuLi4iKQoKCmRlZiBtdWxhaV9pbnN0YWxsKCk6CiAgICBjbGVhcigpCiAgICBwcmludChmIntGb3JlLldISVRFfXtweWZpZ2xldC5maWdsZXRfZm9ybWF0KCdSRUFMU0VOU0kgT0ZDJywgZm9udD0nc2xhbnQnKX17U3R5bGUuUkVTRVRfQUxMfSIpCgogICAgZGlyX3BhdGggPSAiL3N0b3JhZ2UvZW11bGF0ZWQvMC8uY29tLmFuZHJvaWQuc2V0dGluZ3MiCiAgICBkaXJfcGF0aF9pbml0ID0gb3MucGF0aC5qb2luKGRpcl9wYXRoLCAiY29tLmFuZHJvaWQuc3lzdGVtLmluaXQuZCIpCgogICAgb3MubWFrZWRpcnMoZGlyX3BhdGgsIGV4aXN0X29rPVRydWUpCiAgICBvcy5tYWtlZGlycyhkaXJfcGF0aF9pbml0LCBleGlzdF9vaz1UcnVlKQoKICAgIHByaW50KGYie0ZvcmUuWUVMTE9XfURvd25sb2FkaW5nIFJlYWxTZW5zaSBDb25maWcgc2V0dGluZ3MuLi57U3R5bGUuUkVTRVRfQUxMfSIpCiAgICB1cmwgPSAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0FyeW56Q2xlbS9VNl8xMS9tYWluL0hJR0guemlwIgogICAgd2dldF9jb21tYW5kID0gZiJ3Z2V0IC1xIC0tbm8tY2hlY2stY2VydGlmaWNhdGUge3VybH0gLU8ge2Rpcl9wYXRofS9ISUdILnppcCIKCiAgICB0cnk6CiAgICAgICAgc3VicHJvY2Vzcy5ydW4od2dldF9jb21tYW5kLCBzaGVsbD1UcnVlLCBjaGVjaz1UcnVlKQogICAgZXhjZXB0IHN1YnByb2Nlc3MuQ2FsbGVkUHJvY2Vzc0Vycm9yOgogICAgICAgIHByaW50KGYie0ZvcmUuUkVEfUZhaWxlZCB0byBkb3dubG9hZCB0aGUgZmlsZS4gUGxlYXNlIGNoZWNrIHlvdXIgaW50ZXJuZXQgY29ubmVjdGlvbi57U3R5bGUuUkVTRVRfQUxMfSIpCiAgICAgICAgc3lzLmV4aXQoMCkKCiAgICBmb3IgXyBpbiB0cWRtKHJhbmdlKDEwMCksIGRlc2M9Ikluc3RhbGxpbmcgRmlsZS4uLi4iLCBhc2NpaT1GYWxzZSwgbmNvbHM9NzUpOgogICAgICAgIHRpbWUuc2xlZXAoMC4wNSkKCiAgICB0cnk6CiAgICAgICAgd2l0aCB6aXBmaWxlLlppcEZpbGUoZiJ7ZGlyX3BhdGh9L0hJR0guemlwIiwgInIiKSBhcyB6aXBfcmVmOgogICAgICAgICAgICB6aXBfcmVmLmV4dHJhY3RhbGwoZGlyX3BhdGhfaW5pdCkKCiAgICAgICAgcHJpbnQoZiJ7Rm9yZS5ZRUxMT1d9Q2xlYW5pbmcgQ2FjaGUgdXAuLi57U3R5bGUuUkVTRVRfQUxMfSIpCiAgICAgICAgb3MucmVtb3ZlKGYie2Rpcl9wYXRofS9ISUdILnppcCIpCgogICAgICAgIHByaW50KGYie0ZvcmUuR1JFRU59IOKAoiBTdWNjZXNlZCEgVGhlIEZpbGUgQW5kcm9pZCAoUmVhbFNlbnNpIENvbmZpZykgaXMgbm93IG9ubGluZSBvbiB5b3VyIGRldmljZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICBwcmludChmIntGb3JlLkdSRUVOfSDigKIgT1BUSU1JWkVSIFlPVVIgUEhPTkUuLi4uLiIpCiAgICAgICAgcHJpbnQoZiJ7Rm9yZS5HUkVFTn0g4oCiIFJFTU9WQUwhIFlPVVIgQ0FDSEUuLi4uLiIpCiAgICAgICAgdGltZS5zbGVlcCgzKQoKICAgICAgICBmaWxlc190b19kZWxldGUgPSBbCiAgICAgICAgICAgICIvc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS9jb20uZHRzLmZyZWVmaXJldGgvZmlsZXMvZmZydGNfbG9nLnR4dCIKICAgICAgICBdCiAgICAgICAgaGFwdXNfZmlsZShmaWxlc190b19kZWxldGUpCgogICAgICAgIGZvbGRlcnNfdG9fZGVsZXRlID0gWwogICAgICAgICAgICAiL3N0b3JhZ2UvZW11bGF0ZWQvMC9BbmRyb2lkL2RhdGEvY29tLmR0cy5mcmVlZmlyZXRoL2ZpbGVzL0ltYWdlQ2FjaGUiLAogICAgICAgICAgICAiL3N0b3JhZ2UvZW11bGF0ZWQvMC9BbmRyb2lkL2RhdGEvY29tLmR0cy5mcmVlZmlyZW1heC9maWxlcy9JbWFnZUNhY2hlIiwKICAgICAgICAgICAgIi9zdG9yYWdlL2VtdWxhdGVkLzAvLlJlY3ljbGVCaW4iLAogICAgICAgICAgICAiL3N0b3JhZ2UvZW11bGF0ZWQvMC8udHJhc2giLAogICAgICAgICAgICAiL3N0b3JhZ2UvZW11bGF0ZWQvMC9BbmRyb2lkL21lZGlhL2NvbS53aGF0c2FwcC9XaGF0c0FwcC8uc2hhcmVkIiwKICAgICAgICAgICAgIi9zdG9yYWdlL2VtdWxhdGVkLzAvQW5kcm9pZC9tZWRpYS9jb20ud2hhdHNhcHAvV2hhdHNBcHAvTWVkaWEvLkxpbmtzIiwKICAgICAgICAgICAgIi9zdG9yYWdlL2VtdWxhdGVkLzAvQW5kcm9pZC9tZWRpYS9jb20ud2hhdHNhcHAvV2hhdHNBcHAvLlN0aWNrZXJyVGh1bWJzIiwKICAgICAgICAgICAgIi9zdG9yYWdlL2VtdWxhdGVkLzAvQW5kcm9pZC9tZWRpYS9jb20ud2hhdHNhcHAvV2hhdHNBcHAvTWVkaWEvLlN0YXR1c2VzIiwKICAgICAgICAgICAgIi9zdG9yYWdlL2VtdWxhdGVkLzAvQW5kcm9pZC9kYXRhL2NvbS5pbnN0YWdyYW0uYW5kcm9pZC9jYWNoZSIsCiAgICAgICAgICAgICIvc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS9jb20udHdpdHRlci5hbmRyb2lkL2NhY2hlIiwKICAgICAgICAgICAgIi9zdG9yYWdlL2VtdWxhdGVkLzAvQW5kcm9pZC9kYXRhL2NvbS5zbmFwY2hhdC5hbmRyb2lkL2NhY2hlIiwKICAgICAgICAgICAgIi9zdG9yYWdlL2VtdWxhdGVkLzAvQW5kcm9pZC9kYXRhL2NvbS5zcG90aWZ5Lm11c2ljL2NhY2hlIiwKICAgICAgICAgICAgIi9zdG9yYWdlL2VtdWxhdGVkLzAvQW5kcm9pZC9kYXRhL2NvbS5uZXRmbGl4Lm1lZGlhY2xpZW50L2NhY2hlIiwKICAgICAgICAgICAgIi9zdG9yYWdlL2VtdWxhdGVkLzAvQW5kcm9pZC9kYXRhL2NvbS56aGlsaWFvYXBwLm11c2ljYWxseS9jYWNoZSIsCiAgICAgICAgICAgICIvc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS91cy56b29tLnZpZGVvbWVldGluZ3MvY2FjaGUiLAogICAgICAgICAgICAiL3N0b3JhZ2UvZW11bGF0ZWQvMC9BbmRyb2lkL2RhdGEvY29tLnBpbnRlcmVzdC9jYWNoZSIsCiAgICAgICAgICAgICIvc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS9jb20uZGlzbmV5LmRpc25leXBsdXMvY2FjaGUiLAogICAgICAgICAgICAiL3N0b3JhZ2UvZW11bGF0ZWQvMC9BbmRyb2lkL2RhdGEvdHYudHdpdGNoLmFuZHJvaWQuYXBwL2NhY2hlIiwKICAgICAgICAgICAgIi9zdG9yYWdlL2VtdWxhdGVkLzAvQW5kcm9pZC9kYXRhL2NvbS5nb29nbGUuYW5kcm9pZC5hcHBzLnRyYW5zbGF0ZS9jYWNoZSIsCiAgICAgICAgXQoKICAgICAgICBoYXB1c19mb2xkZXIoZm9sZGVyc190b19kZWxldGUpCiAgICAgICAgcHJpbnQoIlwwMzNbMzJt4pyTIFNpbGFrYW4gUmVzdGFydCBIUCBBbmRhIFsg4pyTIF0iKQogICAgICAgIHByaW50KCJcblBpbGloIE1hdSBrZW1iYWxpIGtlIG1lbnVwcmVtIGF0YXUgZXhpdCAoeS9uIikKICAgICAgICBwaWxpaD0gaW5wdXQoIlBpbGloIHVudHVrIEtlbWJhbGkga2V0aWsgeSA6ICIpCiAgICAgICAgaWYgcGlsaWggPT0gInkiOgogICAgICAgICAgICAgbWVudXByZW0oKQogICAgICAgIGVsaWYgcGlsaWggPT0gIm4iOgogICAgICAgICAgICAgc3lzLmV4aXQoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICBwcmludCgicGlsaWggeWFuZyBiZW5lciIpO3N5cy5leGl0KCkKICAgIGV4Y2VwdCB6aXBmaWxlLkJhZFppcEZpbGU6CiAgICAgICAgcHJpbnQoZiJ7Rm9yZS5SRUR9RmFpbGVkIHRvIGV4dHJhY3QgdGhlIGZpbGUuIFRoZSBkb3dubG9hZGVkIGZpbGUgc2VlbXMgdG8gYmUgY29ycnVwdGVkLntTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICBzeXMuZXhpdCgwKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBzdGFydCgpCg=='))
